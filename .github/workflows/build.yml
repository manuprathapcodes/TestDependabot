name: LRS Server Build & Lint

on:
  pull_request:
    branches: [ "main", "release/*" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.11"

      - name: Install tools
        run: |
          python -m pip install --upgrade pip
          pip install jq
          pip install -r requirements.txt

      # Branch naming convention check (fail fast)
      - name: Validate branch name
        run: |
          echo "Checking branch name: ${{ github.head_ref }}"
          BRANCH_NAME="${{ github.head_ref }}"

          # Allowed formats: develop/*, feature/*, bugfix/*, hotfix/*, release/*, chore/*, test/*, dependabot/*
          if [[ ! "$BRANCH_NAME" =~ ^(develop|feature|bugfix|hotfix|release|chore|test|dependabot)\/[a-z0-9._-]+$ ]]; then
            echo "Branch name '$BRANCH_NAME' does not follow the required convention!"
            echo "Allowed formats: develop/*, feature/*, bugfix/*, hotfix/*, release/*, chore/*, test/*, dependabot/*"
            exit 1
          fi

          echo "Branch name is valid: $BRANCH_NAME"

      - name: Check formatting with Black
        run: black . --check --diff

      - name: Run linting with Ruff and save report
        run: |
          ruff check . --output-format=json > ruff-report.json || true
          echo "## Build Metrics" > build-metrics.md
          echo "" >> build-metrics.md
          echo "**Lint errors:** $(jq '.summary.error_count' ruff-report.json)" >> build-metrics.md
          echo "**Lint warnings:** $(jq '.summary.warning_count' ruff-report.json)" >> build-metrics.md

      # - name: Run type checker
      #   run: |
      #     mypy --config-file pyproject.toml .

      # - name: Build Docker image
      #   run: docker build -t lrs-server:latest .

      # - name: Get Docker image size
      #   run: |
      #     size=$(docker image inspect lrs-server:latest --format='{{.Size}}')
      #     echo "**Docker image size (bytes):** $size" >> build-metrics.md

      # - name: Save Docker image to tarball
      #   run: docker save lrs-server:latest -o lrs-server.tar

      # - name: Upload Docker image artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: lrs-server-image
      #     path: lrs-server.tar

      # - name: Upload build metrics artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-metrics
      #     path: |
      #       ruff-report.json
      #       build-metrics.md

      # - name: Post PR comment with build metrics
      #   if: github.event_name == 'pull_request'
      #   uses: marocchino/sticky-pull-request-comment@v2
      #   with:
      #     header: build-metrics
      #     path: build-metrics.md
